%This file is automatically generated from an E-PDDL specification and follows the mAp syntax.

%%%%%%%%%%%%%%%%%%%%%%%%%    FLUENTS    %%%%%%%%%%%%%%%%%%%%%%%%
%Fluents generated from EPDDL by grounding each predicate (and cheking in :init, :goal and actions for extra predicates)
%The fluents are lexicographically sorted and printed in sets of 10

fluent has_initially_robot1_green, has_initially_robot1_red, has_initially_robot1_yellow, has_initially_robot2_green, has_initially_robot2_red, has_initially_robot2_yellow, occupied_by_robot1_green, occupied_by_robot1_red, occupied_by_robot1_yellow, occupied_by_robot2_green;
fluent occupied_by_robot2_red, occupied_by_robot2_yellow, ok;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%    ACTIONS' NAMES    %%%%%%%%%%%%%%%%%%%%%
%Actions' names generated from EPDDL by adding to each action names its grounded predicates

action peek_robot1, peek_robot2, pspb_robot1_green, pspb_robot1_yellow, pspb_robot1_red, pspb_robot2_green, pspb_robot2_yellow, pspb_robot2_red, pbps_robot1_robot1_green, pbps_robot1_robot1_yellow;
action pbps_robot1_robot1_red, pbps_robot1_robot2_green, pbps_robot1_robot2_yellow, pbps_robot1_robot2_red, pbps_robot2_robot1_green, pbps_robot2_robot1_yellow, pbps_robot2_robot1_red, pbps_robot2_robot2_green, pbps_robot2_robot2_yellow, pbps_robot2_robot2_red;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%    AGENTS' NAMES    %%%%%%%%%%%%%%%%%%%%%%
%Agents' names generated from EPDDL by looking at the 'agent' predicate

agent robot1, robot2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%    ACTIONS' SPECIFICATIONS    %%%%%%%%%%%%%%%%
%Actions' specifications generated from EPDDL by grounding each action's definition

%%%Action peek_robot1

executable peek_robot1 if ok;
peek_robot1 determines has_initially_robot1_green if has_initially_robot1_green;
peek_robot1 determines has_initially_robot1_yellow if has_initially_robot1_yellow;
peek_robot1 determines has_initially_robot1_red if has_initially_robot1_red;
robot1 observes peek_robot1;

%%%

%%%Action peek_robot2

executable peek_robot2 if ok;
peek_robot2 determines has_initially_robot2_green if has_initially_robot2_green;
peek_robot2 determines has_initially_robot2_yellow if has_initially_robot2_yellow;
peek_robot2 determines has_initially_robot2_red if has_initially_robot2_red;
robot2 observes peek_robot2;

%%%

%%%Action pspb_robot1_green

executable pspb_robot1_green if B(robot1,-occupied_by_robot2_red), B(robot1,-occupied_by_robot2_yellow), B(robot1,-occupied_by_robot2_green), B(robot1,-occupied_by_robot1_red), B(robot1,-occupied_by_robot1_yellow), B(robot1,-occupied_by_robot1_green), B(robot1,has_initially_robot1_green);
pspb_robot1_green causes occupied_by_robot1_green;
pspb_robot1_green causes has_initially_robot1_green;
robot1 observes pspb_robot1_green;
robot2 observes pspb_robot1_green;

%%%

%%%Action pspb_robot1_yellow

executable pspb_robot1_yellow if B(robot1,-occupied_by_robot2_red), B(robot1,-occupied_by_robot2_yellow), B(robot1,-occupied_by_robot2_green), B(robot1,-occupied_by_robot1_red), B(robot1,-occupied_by_robot1_yellow), B(robot1,-occupied_by_robot1_green), B(robot1,has_initially_robot1_yellow);
pspb_robot1_yellow causes occupied_by_robot1_yellow;
pspb_robot1_yellow causes has_initially_robot1_yellow;
robot1 observes pspb_robot1_yellow;
robot2 observes pspb_robot1_yellow;

%%%

%%%Action pspb_robot1_red

executable pspb_robot1_red if B(robot1,-occupied_by_robot2_red), B(robot1,-occupied_by_robot2_yellow), B(robot1,-occupied_by_robot2_green), B(robot1,-occupied_by_robot1_red), B(robot1,-occupied_by_robot1_yellow), B(robot1,-occupied_by_robot1_green), B(robot1,has_initially_robot1_red);
pspb_robot1_red causes occupied_by_robot1_red;
pspb_robot1_red causes has_initially_robot1_red;
robot1 observes pspb_robot1_red;
robot2 observes pspb_robot1_red;

%%%

%%%Action pspb_robot2_green

executable pspb_robot2_green if B(robot2,-occupied_by_robot2_red), B(robot2,-occupied_by_robot2_yellow), B(robot2,-occupied_by_robot2_green), B(robot2,-occupied_by_robot1_red), B(robot2,-occupied_by_robot1_yellow), B(robot2,-occupied_by_robot1_green), B(robot2,has_initially_robot2_green);
pspb_robot2_green causes occupied_by_robot2_green;
pspb_robot2_green causes has_initially_robot2_green;
robot1 observes pspb_robot2_green;
robot2 observes pspb_robot2_green;

%%%

%%%Action pspb_robot2_yellow

executable pspb_robot2_yellow if B(robot2,-occupied_by_robot2_red), B(robot2,-occupied_by_robot2_yellow), B(robot2,-occupied_by_robot2_green), B(robot2,-occupied_by_robot1_red), B(robot2,-occupied_by_robot1_yellow), B(robot2,-occupied_by_robot1_green), B(robot2,has_initially_robot2_yellow);
pspb_robot2_yellow causes occupied_by_robot2_yellow;
pspb_robot2_yellow causes has_initially_robot2_yellow;
robot1 observes pspb_robot2_yellow;
robot2 observes pspb_robot2_yellow;

%%%

%%%Action pspb_robot2_red

executable pspb_robot2_red if B(robot2,-occupied_by_robot2_red), B(robot2,-occupied_by_robot2_yellow), B(robot2,-occupied_by_robot2_green), B(robot2,-occupied_by_robot1_red), B(robot2,-occupied_by_robot1_yellow), B(robot2,-occupied_by_robot1_green), B(robot2,has_initially_robot2_red);
pspb_robot2_red causes occupied_by_robot2_red;
pspb_robot2_red causes has_initially_robot2_red;
robot1 observes pspb_robot2_red;
robot2 observes pspb_robot2_red;

%%%

%%%Action pbps_robot1_robot1_green

executable pbps_robot1_robot1_green if occupied_by_robot1_green;
pbps_robot1_robot1_green causes -occupied_by_robot1_green;
robot1 observes pbps_robot1_robot1_green;
robot2 observes pbps_robot1_robot1_green;

%%%

%%%Action pbps_robot1_robot1_yellow

executable pbps_robot1_robot1_yellow if occupied_by_robot1_yellow;
pbps_robot1_robot1_yellow causes -occupied_by_robot1_yellow;
robot1 observes pbps_robot1_robot1_yellow;
robot2 observes pbps_robot1_robot1_yellow;

%%%

%%%Action pbps_robot1_robot1_red

executable pbps_robot1_robot1_red if occupied_by_robot1_red;
pbps_robot1_robot1_red causes -occupied_by_robot1_red;
robot1 observes pbps_robot1_robot1_red;
robot2 observes pbps_robot1_robot1_red;

%%%

%%%Action pbps_robot1_robot2_green

executable pbps_robot1_robot2_green if occupied_by_robot2_green;
pbps_robot1_robot2_green causes -occupied_by_robot2_green;
robot1 observes pbps_robot1_robot2_green;
robot2 observes pbps_robot1_robot2_green;

%%%

%%%Action pbps_robot1_robot2_yellow

executable pbps_robot1_robot2_yellow if occupied_by_robot2_yellow;
pbps_robot1_robot2_yellow causes -occupied_by_robot2_yellow;
robot1 observes pbps_robot1_robot2_yellow;
robot2 observes pbps_robot1_robot2_yellow;

%%%

%%%Action pbps_robot1_robot2_red

executable pbps_robot1_robot2_red if occupied_by_robot2_red;
pbps_robot1_robot2_red causes -occupied_by_robot2_red;
robot1 observes pbps_robot1_robot2_red;
robot2 observes pbps_robot1_robot2_red;

%%%

%%%Action pbps_robot2_robot1_green

executable pbps_robot2_robot1_green if occupied_by_robot1_green;
pbps_robot2_robot1_green causes -occupied_by_robot1_green;
robot1 observes pbps_robot2_robot1_green;
robot2 observes pbps_robot2_robot1_green;

%%%

%%%Action pbps_robot2_robot1_yellow

executable pbps_robot2_robot1_yellow if occupied_by_robot1_yellow;
pbps_robot2_robot1_yellow causes -occupied_by_robot1_yellow;
robot1 observes pbps_robot2_robot1_yellow;
robot2 observes pbps_robot2_robot1_yellow;

%%%

%%%Action pbps_robot2_robot1_red

executable pbps_robot2_robot1_red if occupied_by_robot1_red;
pbps_robot2_robot1_red causes -occupied_by_robot1_red;
robot1 observes pbps_robot2_robot1_red;
robot2 observes pbps_robot2_robot1_red;

%%%

%%%Action pbps_robot2_robot2_green

executable pbps_robot2_robot2_green if occupied_by_robot2_green;
pbps_robot2_robot2_green causes -occupied_by_robot2_green;
robot1 observes pbps_robot2_robot2_green;
robot2 observes pbps_robot2_robot2_green;

%%%

%%%Action pbps_robot2_robot2_yellow

executable pbps_robot2_robot2_yellow if occupied_by_robot2_yellow;
pbps_robot2_robot2_yellow causes -occupied_by_robot2_yellow;
robot1 observes pbps_robot2_robot2_yellow;
robot2 observes pbps_robot2_robot2_yellow;

%%%

%%%Action pbps_robot2_robot2_red

executable pbps_robot2_robot2_red if occupied_by_robot2_red;
pbps_robot2_robot2_red causes -occupied_by_robot2_red;
robot1 observes pbps_robot2_robot2_red;
robot2 observes pbps_robot2_robot2_red;

%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%    INITIAL FLUENTS TRUTH   %%%%%%%%%%%%%%%%%%
%Fluents are considered true when are inserted in :init; otherwise are considered false

%%%True fluents
initially ok, has_initially_robot1_red, has_initially_robot2_yellow;
%%%False fluents
initially -has_initially_robot1_yellow, -occupied_by_robot1_yellow, -has_initially_robot2_green, -has_initially_robot2_red, -occupied_by_robot2_green, -occupied_by_robot1_green, -occupied_by_robot1_red, -occupied_by_robot2_yellow, -has_initially_robot1_green, -occupied_by_robot2_red;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%    INITIAL BELIEFS TRUTH   %%%%%%%%%%%%%%%%%%
%Extracted from the :init field

initially C([robot1,robot2],-occupied_by_robot2_yellow);
initially C([robot1,robot2],-occupied_by_robot2_green);
initially C([robot1,robot2],-occupied_by_robot1_red);
initially C([robot1,robot2],-occupied_by_robot1_yellow);
initially C([robot1,robot2],-occupied_by_robot1_green);
initially C([robot1,robot2],-occupied_by_robot2_red);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%    GOALS   %%%%%%%%%%%%%%%%%%%%%%%%%%
%The goals of the plan. Each goal is presented separately to ease the reading

goal B(robot1,has_initially_robot2_yellow);
goal B(robot1,-occupied_by_robot1_green);
goal B(robot1,-occupied_by_robot1_yellow);
goal B(robot1,-occupied_by_robot1_red);
goal B(robot1,-occupied_by_robot2_green);
goal B(robot1,-occupied_by_robot2_yellow);
goal B(robot1,-occupied_by_robot2_red);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
