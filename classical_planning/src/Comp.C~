/*** Compiler Front-End Test automatically generated by the BNF Converter ***/
/*                                                                          */
/* This test will parse a file, print the abstract syntax tree, and then    */
/* pretty-print the result.                                                 */
/*                                                                          */
/****************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include "generics.h"
#include "Parser.H"
#include "Printer.H"
#include "Absyn.H"
#include "ros/ros.h"
#include "custom_msgs/Compilation.h"

bool compile_it(custom_msgs::Compilation::Request &req,
               custom_msgs::Compilation::Response &res){

  stringstream sstr_req;
  sstr_req << req.data;
  string data = sstr_req.str();
  Program *parse_tree = pProgram(data.c_str());
  if (parse_tree){

    printf("\nParse Succesful!\n");
    PrintAsp *s = new PrintAsp();

    s->print(parse_tree);
    
    sort(s->rules.begin(), s->rules.end());

    stringstream oss;
    ostream_iterator<string> oss_it {oss, "\n"};

    unique_copy(s->rules.begin(), s->rules.end(), oss_it);

    res.data.data = oss.str();

    printf("\nCompiled in ASP!\n\n");

    return true;
  }
  return false;
}


int main(int argc, char ** argv){


  ros::init(argc, argv, "compiler");

  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("compileA", compile_it);

  ros::spin();
}
