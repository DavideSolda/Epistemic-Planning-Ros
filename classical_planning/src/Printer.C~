/*** BNFC-Generated Pretty Printer and Abstract Syntax Viewer ***/

#include "Printer.H"
#define INDENT_WIDTH 2

void PrintAsp::add_rule(string s){

  rules.push_back(s);
}

PrintAsp::PrintAsp(void){}

PrintAsp::~PrintAsp(void){}

void PrintAsp::print(Visitable *v){ 
  v->accept(this);

  int l = 10;
  add_rule("#const l="+to_string(l)+".");
  add_rule("time(1..l).");

  add_rule("not_ok(T) :- time(T), finally(F), not holds(F,T).\n");
  add_rule("goal(T) :- time(T), not not_ok(T).\n");
  add_rule(":- not goal(l).\n");
  add_rule("opposto(F,neg(F)):- fluent(F).\n");
  add_rule("opposto(neg(F),F):- fluent(F).\n");
  add_rule("not_executable(A,T):- time(T), exec(A,F), not holds(F,T).\n");
  add_rule("executable(A,T):- action(A), time(T), T<l, not not_executable(A,T).\n");
  add_rule("holds(F,T+1):- T<l, executable(A,T), occurs(A,T), causes(A,F).\n");
  add_rule("holds(F,T+1):- T<l, occurs(A,T), causes(A,F,T).\n"); // NEW ENTRY!!!!
  add_rule("holds(F,T+1):- T<l, executable(A,T), occurs(A,T), causes(A,F,T).\n"); // NEW ENTRY!!!!
  add_rule("holds(F,T+1):-opposto(F,G), T<l, holds(F,T), not holds(G,T+1).\n");
  add_rule("occurs(A,T):- action(A), time(T), not goal(T), not not_occurs(A,T).\n");
  add_rule("not_occurs(A,T):- action(A), action(B), time(T), occurs(B,T), A!=B.\n");
  add_rule(":- action(A), time(T), occurs(A,T), not executable(A,T).\n");
  add_rule("action(noop).\n");
  add_rule("holds(F,1):-initially(F).\n");
  add_rule("holds(F):-holds(F,l).\n");

  add_rule("#maximize { T:occurs(noop,T) }.\n");
  add_rule("#show occurs/2.\n");
  add_rule("#show holds/1.\n");
  
}

void PrintAsp::visitProgram(Program*p) {} //abstract class

void PrintAsp::visitPrg(Prg* p){ if(p->listdecl_) {p->listdecl_->accept(this);}}

void PrintAsp::visitDecl(Decl*p) {} //abstract class

void PrintAsp::visitDef(Def* p)
{
  std::string var = p->ident_1;
  std::string unaryPredicate = p->ident_2;

  m[var] = unaryPredicate;

}

void PrintAsp::visitExec(Exec* p)
{
  p->action_->accept(this);
  
  ListLiteral* listLit = p->listliteral_;
  for(Literal* lit : *listLit){
    lit->accept(this);

    add_rule("exec("+actionString + ", " + literalString+")");
    literalString="";
    if(varsAction.size()+varsLiteral.size()>0){
      std::string str;
      varsLiteral.insert(varsLiteral.end(), varsAction.begin(), varsAction.end());
      justifyVars(str, varsLiteral);
      add_rule(":-"+str);
    }
    varsLiteral.clear();

    add_rule(".\n");
    
  }
  if(p->listliteral_) {p->listliteral_->accept(this);}
  listLiteralsString = "";
  varsListLiteral.clear();
  
  varsAction.clear();
  actionString="";
  
}

void PrintAsp::visitCaus(Caus* p)
{
  p->action_->accept(this);

  ListLiteral* listLit = p->listliteral_;
  for(Literal* lit : *listLit){
    lit->accept(this);
    add_rule("causes("+actionString + ", " + literalString+")");
    literalString="";
    if(varsAction.size()+varsLiteral.size()>0){
      std::string str;
      varsLiteral.insert(varsLiteral.end(), varsAction.begin(), varsAction.end());
      justifyVars(str, varsLiteral);
      add_rule(":-"+str);
    }
    varsLiteral.clear();
    add_rule(".\n");
  }
  if(p->listliteral_) {p->listliteral_->accept(this);}
  listLiteralsString = "";
  varsListLiteral.clear();
  
  varsAction.clear();
  
}


void PrintAsp::visitCausCond(CausCond* p){
  p->action_->accept(this);

  std::vector<std::string> listCondVars;
  std::string tempConds;
  int count = 0;
  for(auto litCauses : *(p->listliteral_2)){
      litCauses->accept(this);
      if(literalString.find("==")!=std::string::npos || literalString.find("!=")!=std::string::npos)
        tempConds += literalString;
      else
        tempConds += "holds("+literalString+", T)";
      literalString="";
      listCondVars.insert(listCondVars.end(), varsLiteral.begin(), varsLiteral.end());
      if(count != (*(p->listliteral_2)).size()-1) tempConds += ", ";
      count ++;
      varsLiteral.clear();
  }

  std::string rule;

  for(auto litEffected : *(p->listliteral_1)){
    
      rule += "causes("+actionString+", ";
      litEffected->accept(this);
      rule += literalString + ", T):-time(T)";
      literalString="";

      if(varsAction.size()+varsLiteral.size() + listCondVars.size() > 0){ 
        rule += ", ";
        varsLiteral.insert(varsLiteral.end(), varsAction.begin(), varsAction.end());
        varsLiteral.insert(varsLiteral.end(), listCondVars.begin(), listCondVars.end());
        justifyVars(rule, varsLiteral);
      }
      if(tempConds.length()>0){
        rule += ", " + tempConds;
      }

      varsLiteral.clear();
      rule += ".\n";
    
  }

  add_rule(rule);
  //TODO p->listliteral_1
  if(p->listliteral_1) p->listliteral_1->accept(this);
  listLiteralsString = "";
  varsListLiteral.clear();

  if(p->listliteral_2) {p->listliteral_2->accept(this);}
  listLiteralsString = "";
  varsListLiteral.clear();

  varsAction.clear();

}

void PrintAsp::visitInit(Init* p)
{
  std::string init = "initially(";
  p->literal_->accept(this);
  init += literalString + ").\n";
  literalString="";

  add_rule(init);
  
}

void PrintAsp::visitFinal(Final* p)
{
  
  std::string fin = "finally(";
  p->literal_->accept(this);
  fin += literalString + ").\n";
  literalString="";

  add_rule(fin);
}

void PrintAsp::visitPredicate(Predicate*p) {} //abstract class

void PrintAsp::visitPreds(Preds* p)
{
  predString=p->ident_+"(";
  
  if(p->listexp_) p->listexp_->accept(this);
  varsPreds.insert(varsPreds.end(), varsListExpr.begin(), varsListExpr.end());
  varsListExpr.clear();
  predString+=listExprString;
  listExprString="";
  predString+=")";
  
  std::string vars2print;
  
  if(varsPreds.size()>0) {
    justifyVars(vars2print, varsPreds);
    vars2print=":- "+vars2print;

  }
  /*if(! && std::all_of(v.cbegin(), v.cend(), [](std::string i){ return std::isupper(i[0]); })){

  }*/
  add_rule("fluent("+predString+")"+vars2print+".\n");

 }

void PrintAsp::visitPred(Pred* p)
{
  predString=p->ident_;
  add_rule("fluent("+predString+").\n");
  varsPreds.clear();
}

void PrintAsp::visitLiteral(Literal*p) {} //abstract class

void PrintAsp::visitLitN(LitN* p)
{
  literalString="neg(";

  p->predicate_->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsPreds.begin(), varsPreds.end());
  varsPreds.clear();

  literalString+=predString+")";
  predString="";
}

void PrintAsp::visitLit(Lit* p)
{
  p->predicate_->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsPreds.begin(), varsPreds.end());
  varsPreds.clear();


  literalString=predString;
  predString="";
}

void PrintAsp::visitLitE(LitE* p)
{
  p->exp_1->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsExpr.begin(), varsExpr.end());
  varsExpr.clear();

  literalString=exprString+"==";
  exprString="";
  p->exp_2->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsExpr.begin(), varsExpr.end());
  varsExpr.clear();

  literalString+=exprString;
  exprString="";
}

void PrintAsp::visitLitNE(LitNE* p)
{
  p->exp_1->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsExpr.begin(), varsExpr.end());
  varsExpr.clear();

  literalString=exprString+"!=";
  exprString="";
  p->exp_2->accept(this);

  varsLiteral.insert(varsLiteral.end(), varsExpr.begin(), varsExpr.end());
  varsExpr.clear();

  literalString+=exprString;
  exprString="";
}

void PrintAsp::visitAction(Action*p) {} //abstract class

void PrintAsp::visitActs(Acts* p)
{
  actionString=p->ident_+"(";
  
  if(p->listexp_) p->listexp_->accept(this);

  varsAction.insert(varsAction.end(), varsListExpr.begin(), varsListExpr.end());
  varsListExpr.clear();

  actionString+=listExprString+")";
  std::string act = "action("+actionString+")";
  std::string actVars;

  justifyVars(actVars, varsAction);
  if(actVars.length()>0)
    add_rule(act+":-"+actVars+".\n");
  else
    add_rule(act+".\n");
  listExprString="";

}

void PrintAsp::visitAct(Act* p){actionString=p->ident_; add_rule("action("+actionString+").\n"); varsAction.clear();}

void PrintAsp::visitExp(Exp*p) {} //abstract class

void PrintAsp::visitEAdd(EAdd* p)
{
  exprString+="(";
  p->exp_1->accept(this);
  exprString+="+";
  p->exp_2->accept(this);
  exprString+=")";
}

void PrintAsp::visitESub(ESub* p)
{
  exprString+="(";
  p->exp_1->accept(this);
  exprString+="-";
  p->exp_2->accept(this);
  exprString+=")";
}

void PrintAsp::visitEMul(EMul* p)
{
  exprString+="(";
  p->exp_1->accept(this);
  exprString+="*";
  p->exp_2->accept(this);
  exprString+=")";
}

void PrintAsp::visitEDiv(EDiv* p)
{
  exprString+="(";
  p->exp_1->accept(this);
  exprString+="/";
  p->exp_2->accept(this);
  exprString+=")";
}

void PrintAsp::visitEMod(EMod* p)
{
  exprString+="(";
  p->exp_1->accept(this);
  exprString+="\\";
  p->exp_2->accept(this);
  exprString+=")";
}

void PrintAsp::visitEInt(EInt* p){exprString+=std::to_string(p->integer_);}

void PrintAsp::visitEIdent(EIdent* p){
  exprString+=p->ident_;
  std::string var = p->ident_;
  if(isupper(p->ident_[0]) && std::find(varsExpr.begin(), varsExpr.end(), var) == varsExpr.end()) varsExpr.push_back(p->ident_);
}

void PrintAsp::visitListLiteral(ListLiteral *listliteral)
{
  for (ListLiteral::const_iterator i = listliteral->begin() ; i != listliteral->end() ; ++i)
  {
    (*i)->accept(this);

    listLiteralsString+=literalString;
    varsListLiteral.insert(varsListLiteral.end(), varsLiteral.begin(), varsLiteral.end());
    literalString = "";
    varsLiteral.clear();


    if (i != listliteral->end() - 1) listLiteralsString += ", ";
  }

}
void PrintAsp::visitListIdent(ListIdent *listident)
{
  for (ListIdent::const_iterator i = listident->begin() ; i != listident->end() ; ++i)
  {
    
  }
}void PrintAsp::visitListExp(ListExp *listexp)
{
  
  for (ListExp::const_iterator i = listexp->begin() ; i != listexp->end() ; ++i)
  {
    
    exprString="";
    (*i)->accept(this);
    varsListExpr.insert(varsListExpr.end(), varsExpr.begin(), varsExpr.end());
    varsExpr.clear();
    listExprString+=exprString;
    if (i != listexp->end() - 1) listExprString+=", ";
    
  }
  exprString="";

}
void PrintAsp::visitListDecl(ListDecl *listdecl)
{
  for (ListDecl::const_iterator i = listdecl->begin() ; i != listdecl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}
